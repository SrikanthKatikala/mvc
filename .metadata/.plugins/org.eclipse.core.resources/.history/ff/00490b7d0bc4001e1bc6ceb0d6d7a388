package com.zettamine.mat.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.zettamine.mat.entity.InspectionLot;
import com.zettamine.mat.entity.Material;
import com.zettamine.mat.entity.MaterialCharacteristics;
import com.zettamine.mat.service.InspectionLotServiceImpl;
import com.zettamine.mat.service.MaterialServiceImpl;
import com.zettamine.mat.service.PlantServiceImpl;
import com.zettamine.mat.service.UserServiceImpl;
import com.zettamine.mat.service.VendorServiceimpl;

@Controller
@RequestMapping(path="lots")
public class InspectionLotController {

	private InspectionLotServiceImpl lotService; 	
	private MaterialServiceImpl matService;
	private VendorServiceimpl vendorService;
	private PlantServiceImpl plantService;
	private UserServiceImpl userService;
	
	public InspectionLotController(@Autowired InspectionLotServiceImpl lotService,@Autowired MaterialServiceImpl matService,
			@Autowired VendorServiceimpl vendorService,@Autowired PlantServiceImpl plantService, @Autowired UserServiceImpl userService) {
		this.lotService = lotService;
		this.matService = matService;
		this.vendorService = vendorService;
		this.plantService = plantService;
		this.userService = userService;
	}
	
	@GetMapping(path="/list")
    public String listOfInspectionLots(Model model) {
    	List<InspectionLot> lots = lotService.getAllInspectionlot();
        model.addAttribute("lots", lots);
        return "isp_lot_list";
    }

    @GetMapping(path="/add")
    public String showAddInspectionLotForm(Model model) {
    	model.addAttribute("lot",new InspectionLot());
        model.addAttribute("chactr", new MaterialCharacteristics());
        List<Material> all = matService.getAllMaterial();
    	model.addAttribute("materials",all);
        return "mat_char_save";
    }

    @PostMapping(path="/add")
    public String addCharacters(MaterialCharacteristics chactr,Model model) {
    	//List<MaterialCharacteristics> chactrs = new ArrayList<>();
    	boolean save = charService.saveMaterialCharacteristics(chactr);
    	if (save) {
			model.addAttribute("msg", "Characters Saved Successfully");
		} else {
			model.addAttribute("msg", "Failed to save material");
		}
    	//chactrs.add(chactr);
        return "redirect:/matChars/add";
    }
    
    @GetMapping(path="/update")
    public String updateCharacters(@RequestParam("characterId") Integer id, Model model) {
    	MaterialCharacteristics update = charService.getMaterialCharacteristicsById(id);
    	 model.addAttribute("chactr", update);
    	 List<Material> all = matService.getAllMaterial();
     	model.addAttribute("materials",all);
    	return "mat_char_save";
    }
    
    @GetMapping(path="/delete")
    public String deleteCharacter(@RequestParam("characterId") Integer id) {
    	boolean delete = charService.deleteMaterialCharacteristicsById(id);
    	return "redirect:/matChars/list";
    }
	
	
	
}
