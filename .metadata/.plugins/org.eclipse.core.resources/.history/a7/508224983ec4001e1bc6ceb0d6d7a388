package com.zettamine.mat.controller;


import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.zettamine.mat.entity.InspectionActualKey;
import com.zettamine.mat.entity.InspectionActuals;
import com.zettamine.mat.entity.InspectionLot;
import com.zettamine.mat.entity.MaterialCharacteristics;
import com.zettamine.mat.service.InspectionActualServiceImpl;
import com.zettamine.mat.service.InspectionLotServiceImpl;
import com.zettamine.mat.service.MaterialChactrServiceImpl;


@Controller
@RequestMapping(path="actuals")
public class InspectionActualController {

	private InspectionLotServiceImpl lotService;
	private InspectionActualServiceImpl actualService;
	private MaterialChactrServiceImpl charService;
	private InspectionActualKey actualKey;

	public InspectionActualController(InspectionLotServiceImpl lotService, InspectionActualServiceImpl actualService,
			MaterialChactrServiceImpl charService) {
		this.lotService = lotService;
		this.actualService = actualService;
		this.charService = charService;
	}

	@GetMapping(path="/list")
    public String listInspectionActuals(Model model) {
    	List<InspectionActuals> list = actualService.getAllInspectionActuals();
    	List<MaterialCharacteristics> all = charService.getAllMaterialCharacteristics();
    	model.addAttribute("materials",all);
        model.addAttribute("chactrs", list);
        return "isp_act_list";
    }

    @GetMapping(path="/add")
    public String showAddActualsForm(Model model) {
        model.addAttribute("actual", new InspectionActuals());
        List<MaterialCharacteristics> all = charService.getAllMaterialCharacteristics();
    	model.addAttribute("characters",all);
        return "isp_act_save";
    }

    @PostMapping(path="/add")
    public String addActual(InspectionActuals actual,Model model) {
    	boolean saveInspectionActual = actualService.saveInspectionActual(actual);
    	if (saveInspectionActual) {
			model.addAttribute("msg", "Inspection Actuals Saved Successfully");
		} else {
			model.addAttribute("msg", "Failed to save Inspection Actual");
		}
        return "redirect:/actuals/add";
    }
    
    //@GetMapping(path="/update")
    @GetMapping("/{inspectionLot}/{materialCharacteristics}/update")
    public String showUpdateActual(@PathVariable InspectionLot inspectionLot, @PathVariable MaterialCharacteristics materialCharacteristics, Model model) {
//    public String showUpdateActual(@RequestParam("") Integer id, Model model) {
    	InspectionActualKey actualKey = new InspectionActualKey(inspectionLot, materialCharacteristics);
    	
    	InspectionActuals inspectionActualById = actualService.getInspectionActualById(actualKey);
 
    	 model.addAttribute("inspectionActual", inspectionActualById);
    	 List<MaterialCharacteristics> all = charService.getAllMaterialCharacteristics();
     	model.addAttribute("materials",all);
    	return "isp_act_save";
    }
    
    @GetMapping(path="/delete")
    public String deleteCharacter(@RequestParam("characterId") Integer id) {
//    	boolean delete = charService.deleteMaterialCharacteristicsById(id);
    	return "redirect:/actuals/list";
    }

	
}
